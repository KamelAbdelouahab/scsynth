/*
 * This file was generated by the scsynth tool, and is availabl  efor use under
 * the MIT license. More information can be found at
 * http  s://github.com/arminalaghi/scsynth/
 */
module ReSC_test_paper_example(); //a testbench for an ReSC module
	reg [9:0] x_bin; //binary value of input
	reg start;
	wire done;
	wire [9:0] z_bin; //binary value of output
	reg [9:0] expected_z; //expected output

	reg clk;
	reg reset;

	ReSC_wrapper_paper_example ReSC (
		.x_bin (x_bin),
		.start (start),
		.done (done),
		.z_bin (z_bin),
		.clk (clk),
		.reset (reset)
	);

	always begin
		#1 clk <= ~clk;
	end

	initial begin
		clk = 0;
		reset = 1;
		#1 reset = 0;
		start = 1;

		#2 x_bin = 10'd95;
		expected_z = 10'd347;
		start = 0;

		#2054 x_bin = 10'd42;
		expected_z = 10'd300;
		start = 0;

		#2054 x_bin = 10'd559;
		expected_z = 10'd521;
		start = 0;

		#2054 x_bin = 10'd788;
		expected_z = 10'd589;
		start = 0;

		#2054 x_bin = 10'd412;
		expected_z = 10'd492;
		start = 0;

		#2054 x_bin = 10'd237;
		expected_z = 10'd436;
		start = 0;

		#2054 x_bin = 10'd18;
		expected_z = 10'd276;
		start = 0;

		#2054 x_bin = 10'd392;
		expected_z = 10'd487;
		start = 0;

		#2054 x_bin = 10'd608;
		expected_z = 10'd531;
		start = 0;

		#2054 x_bin = 10'd978;
		expected_z = 10'd720;
		start = 0;

		#2054 x_bin = 10'd930;
		expected_z = 10'd677;
		start = 0;

		#2068 $stop;
	end

	always @(posedge done) begin
		$display("x: %b, z: %b, expected_z: %b",x_bin, z_bin, expected_z);
		start = 1;
	end
endmodule
