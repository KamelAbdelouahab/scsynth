/*
 * This file was generated by the scsynth tool, and is availabl  efor use under
 * the MIT license. More information can be found at
 * http  s://github.com/arminalaghi/scsynth/
 */
module ReSC_test_paper_example(); //a testbench for an ReSC module
	reg [9:0] x_bin; //binary value of input
	reg start;
	wire done;
	wire [9:0] z_bin; //binary value of output
	reg [9:0] expected_z; //expected output

	reg clk;
	reg reset;

	ReSC_wrapper_paper_example ReSC (
		.x_bin (x_bin),
		.start (start),
		.done (done),
		.z_bin (z_bin),
		.clk (clk),
		.reset (reset)
	);

	always begin
		#1 clk <= ~clk;
	end

	initial begin
		clk = 0;
		reset = 1;
		#1 reset = 0;
		start = 1;

		#2 x_bin = 10'd822;
		expected_z = 10'd606;
		start = 0;

		#2054 x_bin = 10'd485;
		expected_z = 10'd507;
		start = 0;

		#2054 x_bin = 10'd913;
		expected_z = 10'd664;
		start = 0;

		#2054 x_bin = 10'd457;
		expected_z = 10'd501;
		start = 0;

		#2054 x_bin = 10'd450;
		expected_z = 10'd500;
		start = 0;

		#2054 x_bin = 10'd890;
		expected_z = 10'd647;
		start = 0;

		#2054 x_bin = 10'd249;
		expected_z = 10'd441;
		start = 0;

		#2054 x_bin = 10'd306;
		expected_z = 10'd463;
		start = 0;

		#2054 x_bin = 10'd570;
		expected_z = 10'd523;
		start = 0;

		#2054 x_bin = 10'd384;
		expected_z = 10'd485;
		start = 0;

		#2054 x_bin = 10'd461;
		expected_z = 10'd502;
		start = 0;

		#2068 $stop;
	end

	always @(posedge done) begin
		$display("x: %b, z: %b, expected_z: %b",x_bin, z_bin, expected_z);
		start = 1;
	end
endmodule
