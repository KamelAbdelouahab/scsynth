/*
 * This file was generated by the scsynth tool, and is availabl  efor use under
 * the MIT license. More information can be found at
 * http  s://github.com/arminalaghi/scsynth/
 */module ReSC_test_paper_example(); //a testbench for an ReSC module
	reg [9:0] x_bin; //binary value of input
	reg start;
	wire done;
	wire [9:0] z_bin; //binary value of output
	reg [9:0] expected_z; //expected output

	reg clk;
	reg reset;

	ReSC_wrapper_paper_example ReSC (
		.x_bin (x_bin),
		.start (start),
		.done (done),
		.z_bin (z_bin),
		.clk (clk),
		.reset (reset)
	);

	always begin
		#1 clk <= ~clk;
	end

	initial begin
		clk = 0;
		reset = 1;
		#1 reset = 0;
		start = 1;
		#2 x_bin = 10'd101;
		expected_z = 10'd352;
		start = 0;

		#2053 x_bin = 10'd218;
		expected_z = 10'd426;
		start = 0;

		#2053 x_bin = 10'd283;
		expected_z = 10'd455;
		start = 0;

		#2053 x_bin = 10'd185;
		expected_z = 10'd409;
		start = 0;

		#2053 x_bin = 10'd697;
		expected_z = 10'd554;
		start = 0;

		#2053 x_bin = 10'd732;
		expected_z = 10'd566;
		start = 0;

		#2053 x_bin = 10'd232;
		expected_z = 10'd433;
		start = 0;

		#2053 x_bin = 10'd687;
		expected_z = 10'd551;
		start = 0;

		#2053 x_bin = 10'd380;
		expected_z = 10'd484;
		start = 0;

		#2053 x_bin = 10'd652;
		expected_z = 10'd542;
		start = 0;

		#2053 x_bin = 10'd631;
		expected_z = 10'd536;
		start = 0;

		#2053 $stop;
	end

	always @(posedge done) begin
		$display("x: %b, z: %b, expected_z: %b",x_bin, z_bin, expected_z);
		start = 1;
	end
endmodule
